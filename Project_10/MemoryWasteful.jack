// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class MemoryWasteful {
    static Array ram;
    static int freeBlockPointer;
    static Array heapBasePointer;
    /** Initializes memory parameters. */
    function void init() {
        let ram = 0;
		let freeBlockPointer = 2048;
		let heapBasePointer = freeBlockPointer;
		let heapBasePointer[0] = 0;
		let heapBasePointer[1] = 14335;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** finds and allocates from the heapBasePointer a memory blockPointer of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int blockPointer;
        var int currentBlockSize;

        let heapBasePointer = freeBlockPointer;
        let currentBlockSize = heapBasePointer[1];

        if (size < (currentBlockSize + 1)) {
            let blockPointer = (heapBasePointer + currentBlockSize + 2) - size;
            let heapBasePointer[1] = (currentBlockSize-size);

            return blockPointer;
        } 
        return -1; 
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        return;
    }    
}
